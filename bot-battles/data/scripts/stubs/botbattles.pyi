# coding: utf-8

import enum

# Components
class InputComponent:
    linearVelocityX : float = ...
    linearVelocityY : float = ...
    angularVelocity : float = ...
    def shootPrimaryWeapon(self): ...
    def shootSecondaryWeapon(self): ...
    def reload(self): ...
    def heal(self): ...

class TransformComponent:
    position : tuple[float, float] = ...
    rotation : float = ...
    direction : tuple[float, float] = ...

class ColliderComponent:
    size : tuple[float, float] = ...

class RigidbodyComponent:
    maxLinearVelocity : float = ...
    maxAngularVelocity : float = ...
    linearVelocity : tuple[float, float] = ...
    angularVelocity : float = ...

class WeaponComponent:
    primaryWeaponDamage : int = ...
    secondaryWeaponDamage : int = ...
    currentAmmo : int = ...
    maxAmmo : int = ...
    ammoBoxAmmo : int = ...
    primaryWeaponRange : float = ...
    secondaryWeaponRange : float = ...
    primaryWeaponShootingTime : float = ...
    primaryWeaponShootingCooldown : float = ...
    secondaryWeaponShootingTime : float = ...
    secondaryWeaponShootingCooldown : float = ...
    reloadingTime : float = ...
    reloadingCooldown : float = ...

class HealthComponent:
    currentHP : int = ...
    maxHP : int = ...
    firstAidBoxHP : int = ...
    healingTime : float = ...
    healingCooldown : float = ...

class SightComponent:
    seenBotEntities : list[int] = ...
    def getSeenBotInfo(self, botEntity : int) -> SeenBotInfo: ...
    seenWeaponEntities : list[int] = ...
    def getSeenWeaponInfo(self, weaponEntity : int) -> SeenWeaponInfo: ...
    seenHealthEntities : list[int] = ...
    def getSeenHealthInfo(self, healthEntity : int) -> SeenHealthInfo: ...

class SeenBotInfo:
    transform : TransformComponent = ...
    collider : ColliderComponent = ...
    rigidbody : RigidbodyComponent = ...
    weapon : WeaponComponent = ...
    health : HealthComponent = ...
    action : ActionComponent = ...

class SeenWeaponInfo:
    transform : TransformComponent = ...
    collider : ColliderComponent = ...
    weapon : WeaponComponent = ...

class SeenHealthInfo:
    transform : TransformComponent = ...
    collider : ColliderComponent = ...
    health : HealthComponent = ...

class ActionComponent:
    canPerformAction : bool = ...

class MapComponent:
    def getTileType(self, mapPosition : tuple[int, int]) -> TileType: ...
    def getWorldPosition(self, mapPosition : tuple[int, int]) -> tuple[float, float]: ...
    def getMapPosition(self, worldPosition : tuple[float, float]) -> tuple[int, int]: ...
    tileCount : tuple[int, int] = ...

class TileType(enum.Enum):
    NONE : TileType = ...
    WALL : TileType = ...
    FLOOR : TileType = ...
    BOT_SPAWNER : TileType = ...
    WEAPON_SPAWNER : TileType = ...
    HEALTH_SPAWNER : TileType = ...

# Events
class CollisionEvent:
    normal : tuple[float, float] = ...
    relativeVelocity : tuple[float, float] = ...